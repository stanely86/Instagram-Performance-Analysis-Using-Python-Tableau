# -*- coding: utf-8 -*-
"""Clean_ECPRO_DATA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sN-hdlQImt4bdPOxR4GkImmDSVAdpKWk
"""

import pandas as pd

df = pd.read_csv("sample_data/0711_Last 90 Days - Sheet1.csv")
df.head()

# prompt: Help me remove "\n" in column titles

df.columns = df.columns.str.replace(r'\n', '', regex=True)
df.head()

# prompt: Convert the column "Date published" to the format "04/02/2025 06:41"

import pandas as pd
df['Date published'] = pd.to_datetime(df['Date published'], format='%a %b %d, %I:%M %p', errors='coerce').dt.strftime('%m/%d/%Y %H:%M')
print(df['Date published'])

# prompt: Chnage the year in "date published" column to 2025

import pandas as pd
df['Date published'] = pd.to_datetime(df['Date published'], format='%m/%d/%Y %H:%M', errors='coerce').apply(lambda x: x.replace(year=2025) if pd.notnull(x) else x)
df['Date published'] = df['Date published'].dt.strftime('%m/%d/%Y %H:%M')
print(df['Date published'])

# prompt: Chang time to PM AND minus three hours for each time

import pandas as pd
df['Date published'] = pd.to_datetime(df['Date published'], format='%m/%d/%Y %H:%M', errors='coerce') - pd.Timedelta(hours=3)
df['Date published'] = df['Date published'].dt.strftime('%m/%d/%Y %I:%M %p')
print(df['Date published'])

df.head()

# prompt: Covnver the columns "Views" and "Reach" from text data to numeric data by first getting the number at front like "17K" and then convert it to 17000

import pandas as pd
import re

def convert_k_m(text):
  if pd.isna(text):
    return 0
  text = str(text).strip()
  # Use regex to find the initial number followed by K or M, or just a number
  match = re.match(r'(\d+\.?\d*)([KM])?', text)
  if match:
    value = float(match.group(1))
    unit = match.group(2)
    if unit == 'K':
      return int(value * 1000)
    elif unit == 'M':
      return int(value * 1000000)
    else:
      return int(value)
  else:
    return 0


df['Views\u200b'] = df['Views\u200b'].apply(convert_k_m)
df['Reach\u200b'] = df['Reach\u200b'].apply(convert_k_m)


df.head()

# prompt: Get the number before text in columns "Reactions/Likes, comments and shares​" "Saves"​	"Comments"​	"Shares"​	"Likes and reactions​"	​	"Interactions​", and remove the following text

columns_to_process = [
    "Reactions/Likes, comments and shares​",
    "Saves​",
    "Comments​",
    "Shares​",
    "Likes and reactions​",
    "Interactions​",
]

for col in columns_to_process:
  # Use regex to extract the number at the beginning of the string
  df[col] = df[col].astype(str).str.extract(r'(\d+)').astype(float)

df.head()

df["Title"].describe()

df = df.drop(['Distribution\u200b', 'Link clicks\u200b', '3-second views\u200b', '1-minute views\u200b','Returning viewers\u200b'], axis=1)

df

# prompt: Get the time at front in the "Average watch time​", and then remove the following text

df['Average watch time\u200b'] = df['Average watch time\u200b'].astype(str).str.extract(r'(\d+:\d+)')[0]
df.head()

df

# prompt: convert "Watch time" from "hour and min" to "min", becareful the format is like "3h 19m", and make it number

import pandas as pd
def convert_watch_time_to_minutes(time_str):
  if pd.isna(time_str):
    return 0
  # Use regex to find the hour and minute parts
  match = re.match(r'(\d+)h ?(\d+)m', time_str)
  if match:
    hours = int(match.group(1))
    minutes = int(match.group(2))
    return hours * 60 + minutes
  return 0  # Return 0 if the format is not as expected


df['Watch time\u200b'] = df['Watch time\u200b'].apply(convert_watch_time_to_minutes)
df.head()
print(df['Watch time\u200b'])
print(df.info())

# prompt: Convert the time in "Average watch time" into second and make it numeric data​

import pandas as pd
def convert_time_to_seconds(time_str):
  if pd.isna(time_str) or time_str == '':
    return 0
  # Split the string into minutes and seconds
  parts = time_str.split(':')
  if len(parts) == 2:
    try:
      minutes = int(parts[0])
      seconds = int(parts[1])
      return minutes * 60 + seconds
    except ValueError:
      return 0  # Return 0 if parts cannot be converted to integers
  return 0  # Return 0 if the format is not as expected

df['Average watch time\u200b'] = df['Average watch time\u200b'].apply(convert_time_to_seconds)
df['Average watch time\u200b'] = pd.to_numeric(df['Average watch time\u200b'], errors='coerce').fillna(0)
df.head()
print(df['Average watch time\u200b'])
print(df.info())

df.to_csv("cleaned_data.csv", index=False)